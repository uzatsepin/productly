/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/main.js":
/*!************************!*\
  !*** ./src/js/main.js ***!
  \************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// import * as flsFunctions from './modules/functions.js';\n// flsFunctions.isWebp();\n\n// import {strategiesItems} from \"./strategies-items.js\";\n//\n// const strategyWrapper = document.querySelector('.strategy__wrapper');\n//\n// strategiesItems.forEach(elem => {\n//     const {title, urlToImage, tags} = elem;\n//     let strategyTags = '';\n//     for(let i = 0; i < tags.length; i++) {\n//         strategyTags += `<span class=\"tag tag--filled\" >${tags[i]}</span>`\n//     }\n//     const strategy = document.createElement('article');\n//     strategy.classList.add('strategy', 'block-shadowed')\n//     strategy.innerHTML = `\n//         <img class=\"strategy__img\" src=${urlToImage} alt=\"strategy-img\">\n//         <h4 class=\"strategy__title\">${title}</h4>\n//         <div class=\"strategy__tags\">${strategyTags}</div>\n//     `\n//     strategyWrapper.appendChild(strategy);\n// });\n\n\nwindow.onload = function () {\n    addTagsClickHandler();\n}\n\nconst addTagsClickHandler = () => {\n    document.querySelector('.strategies__tags').addEventListener('click', (e) => {\n        if(e.target.classList.contains('tag')) { //проверяем нажатие на тэг\n            let clickedTag = e.target; //записываем в переменную значение\n            removeSelectedTags(); //убрали класс selected\n            selectClickedTag(clickedTag); //добавили класс selected в нажатый тэг\n            if(clickedTag.innerText === 'All') {\n                showAllStrategies();\n            } else {\n                filterStrategiesBySelected(clickedTag.innerText);\n            }\n        }\n    })\n}\n\nconst showAllStrategies = () => {\n    let strategies = document.querySelectorAll('.strategy__wrapper .strategy');\n    strategies.forEach(strategy => {\n        strategy.classList.remove('strategy__hidden')\n    })\n}\n\nconst filterStrategiesBySelected = (selectedTag) => {\n    let strategies = document.querySelectorAll('.strategy__wrapper .strategy');\n    strategies.forEach(strategy => {\n        strategy.classList.add('strategy__hidden');\n        strategy.querySelectorAll('.tag').forEach(tag => {\n            if(tag.innerText === selectedTag) {\n                strategy.classList.remove('strategy__hidden')\n            }\n        })\n    })\n}\n\nconst removeSelectedTags = () => {\n    let  tags = document.querySelectorAll('.strategies__tags .tag');\n    tags.forEach(tag => {\n        tag.classList.remove('tag--selected');\n        tag.classList.add('tag--bordered')\n    })\n}\n\nconst selectClickedTag = (clickedTag) => {\n    clickedTag.classList.add('tag--selected');\n    clickedTag.classList.remove('tag--bordered');\n}\n\nconst hamburderBtn = document.querySelector('.hamburger');\n\nhamburderBtn.addEventListener('click', () => {\n    document.querySelector('.menu__list').classList.toggle('menu__list-active');\n})\n\n//# sourceURL=webpack://gulpstarter/./src/js/main.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/main.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;